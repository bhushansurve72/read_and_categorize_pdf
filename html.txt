import streamlit as st
import streamlit.components.v1 as components

# --- 1. Define the HTML/CSS/JavaScript Code ---

HTML_CODE = """
<style>
/* CSS Styling */
body {
    font-family: Arial, sans-serif;
}

.progress-container {
    width: 100%; /* Adjust to fit Streamlit's container width */
    max-width: 700px;
    margin: 20px auto 40px auto;
}

/* Step Labels (Top Row) */
.progress-bar {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
}

.progress-step {
    text-align: center;
    width: 25%;
    color: #888;
    font-size: 0.9em;
    transition: color 0.5s ease;
}

/* Progress Line (Bottom Row) */
.progress-line-container {
    height: 8px;
    background-color: #ddd;
    border-radius: 4px;
    position: relative;
}

.progress-line {
    height: 100%;
    width: 0%;
    background-color: #4CAF50;
    border-radius: 4px;
    transition: width 0.7s ease-in-out;
}

/* Active State Styles */
.progress-step.active {
    font-weight: bold;
    color: #333;
}

.progress-step.completed {
    color: #4CAF50;
}

.button-container {
    display: flex;
    gap: 15px;
    justify-content: center;
    margin-top: 20px;
}

button {
    /* Styles for the buttons *inside* the HTML component */
    padding: 10px 15px;
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #0056b3;
}
</style>

<div class="progress-container">
    <div class="progress-bar" id="progressBar">
        <div class="progress-step" id="step1">File Uploading</div>
        <div class="progress-step" id="step2">Extracting Data</div>
        <div class="progress-step" id="step3">Calling MCP Server</div>
        <div class="progress-step" id="step4">Complete Update</div>
    </div>
    <div class="progress-line-container">
        <div class="progress-line" id="progressLine"></div>
    </div>
</div>

<div class="button-container">
    <button onclick="updateProgress(1)">Start Upload</button>
    <button onclick="updateProgress(2)">Start Extracting</button>
    <button onclick="updateProgress(3)">Call Server</button>
    <button onclick="updateProgress(4)">Finish</button>
</div>

<script>
// JavaScript Logic
const totalSteps = 4;

function updateProgress(step) {
    const progressLine = document.getElementById('progressLine');
    let percentage = (step - 1) * (100 / (totalSteps - 1));

    if (step === totalSteps) {
        percentage = 100;
    }
    progressLine.style.width = percentage + '%';

    for (let i = 1; i <= totalSteps; i++) {
        const stepElement = document.getElementById('step' + i);
        
        stepElement.classList.remove('active', 'completed');

        if (i === step) {
            stepElement.classList.add('active');
        } 
        else if (i < step) {
            stepElement.classList.add('completed');
        }
    }
}

// Initialize the progress bar to the first step on page load
document.addEventListener('DOMContentLoaded', () => {
    updateProgress(1);
});
</script>
"""

# --- 2. Streamlit Page Setup ---

st.title("Custom Multi-State Progress Tracker")
st.markdown("Use the buttons below to trigger the progress bar animation within the embedded component.")

# Inject the custom HTML/CSS/JS component
# Height needs to be sufficient to show the progress bar and the buttons
components.html(
    HTML_CODE,
    height=200, 
    scrolling=False
)

st.markdown("""
---
### ðŸ’¡ Note on Streamlit Integration
In a real application, you would typically advance the progress bar **from your Python code**, not from buttons inside the HTML. 

To do this, you would:
1.  Remove the buttons from the `HTML_CODE`.
2.  Use **Streamlit buttons** (`st.button`) outside the component.
3.  Store the current progress step in **`st.session_state`**.
4.  Write a **separate function** to generate the HTML/JS based on the current step in `st.session_state`.

Would you like the code modified to use **Streamlit buttons** instead of the embedded HTML buttons?
""")